generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  username      String?   @unique
  bio           String?
  avatar        String?
  walletAddress String?    @unique
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  stores        Store[]
  products      Product[]
  orders        Order[]
  linkInBio     LinkInBio?

  @@map("users")
}

model Store {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String?
  logo        String?
  banner      String?
  theme       Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products    Product[]

  @@map("stores")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String
  price       Float
  currency    String      @default("USDC")
  type        ProductType
  category    String?
  imageUrls   String[]
  files       String[]    // For digital products
  isActive    Boolean     @default(true)
  inventory   Int?        // For physical products
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeId     String      @db.ObjectId
  store       Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders      OrderItem[]

  @@unique([storeId, slug])
  @@map("products")
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String      @unique
  totalAmount   Float
  currency      String      @default("USDC")
  status        OrderStatus @default(PENDING)
  paymentHash   String?
  buyerEmail    String
  buyerName     String?
  buyerAddress  String?     // Wallet address
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  sellerId      String      @db.ObjectId
  seller        User        @relation(fields: [sellerId], references: [id])
  items         OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int    @default(1)
  price     Float
  
  // Relations
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model LinkInBio {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  avatar      String?
  theme       Json?
slug        String   @unique
    links       Json          @default("[]")
  projects    Json          @default("[]")
  socialUrls  Json          @default("{}")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("link_in_bio")
}

enum ProductType {
  DIGITAL
  PHYSICAL
  COURSE
  SERVICE
  EVENT
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}
